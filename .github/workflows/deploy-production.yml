name: Sumo Chatwoot for Production

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Validate Cloudformation
        run: |
          aws cloudformation validate-template \
            --parameters ParameterKey=Environment,ParameterValue=prod \
            --template-body file://aws_cloudformation/production/network.yml

          aws cloudformation validate-template \
            --parameters ParameterKey=Environment,ParameterValue=prod \
            --template-body file://aws_cloudformation/production/application_load_balancer.yml

          aws cloudformation validate-template \
            --parameters ParameterKey=Environment,ParameterValue=prod \
            --template-body file://aws_cloudformation/production/postgresql.yml

          aws cloudformation validate-template \
            --parameters ParameterKey=Environment,ParameterValue=prod \
            --template-body file://aws_cloudformation/production/redis.yml

          aws cloudformation validate-template \
            --parameters ParameterKey=Environment,ParameterValue=prod \
            --template-body file://aws_cloudformation/production/bastion.yml

          aws cloudformation validate-template \
            --parameters ParameterKey=Environment,ParameterValue=prod \
            --template-body file://aws_cloudformation/production/chatwoot.yml

          aws cloudformation validate-template \
            --parameters ParameterKey=Environment,ParameterValue=prod \
            --template-body file://aws_cloudformation/development/route.yml

          aws cloudformation validate-template \
            --parameters ParameterKey=Environment,ParameterValue=prod \
            --template-body file://aws_cloudformation/development/auto_scaling.yml

      - name: Network-Cloudformation
        run: |
          STACK_NAME=sumo-chatwoot-network-stack-prod
          aws cloudformation deploy \
            --template-file aws_cloudformation/production/network.yml \
            --parameters ParameterKey=Environment,ParameterValue=prod \
            --stack-name $STACK_NAME \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

      - name: Application Load Balancer-Cloudformation
        run: |
          STACK_NAME=sumo-chatwoot-alb-stack-prod
          aws cloudformation deploy \
            --template-file aws_cloudformation/production/application_load_balancer.yml \
            --parameters ParameterKey=Environment,ParameterValue=prod \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              SumoChatwootCertificateArn=${{ secrets.ACM_CERTIFICATE_ARN }} \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

          SumoChatwootTargetGroupArn=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootTargetGroupArn'].OutputValue" --output text)
          echo "TARGET_GROUP_ARN=${SumoChatwootTargetGroupArn}" >> $GITHUB_ENV

      - name: Postgresql-Cloudformation
        run: |
          STACK_NAME=sumo-chatwoot-postgre-stack-prod
          aws cloudformation deploy \
            --template-file aws_cloudformation/production/postgresql.yml \
            --parameters ParameterKey=Environment,ParameterValue=prod \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              SumoChatwootDBUsername=${{ secrets.RDS_MASTER_USERNAME }} \
              SumoChatwootDBPassword=${{ secrets.RDS_MASTER_PASSWORD }} \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

          SumoChatwootRDSInstanceEndpoint=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootRDSInstanceEndpoint'].OutputValue" --output text)
          echo "POSTGRES_HOST=${SumoChatwootRDSInstanceEndpoint}" >> $GITHUB_ENV

      - name: Redis-Cloudformation
        run: |
          STACK_NAME=sumo-chatwoot-redis-stack-prod
          aws cloudformation deploy \
            --template-file aws_cloudformation/production/redis.yml \
            --parameters ParameterKey=Environment,ParameterValue=prod \
            --stack-name $STACK_NAME \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

          SumoChatwootRedisEndpointAddress=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootRedisEndpointAddress'].OutputValue" --output text)
          echo "REDIS_HOST=${SumoChatwootRedisEndpointAddress}" >> $GITHUB_ENV

      - name: Bastion-Cloudformation
        run: |
          STACK_NAME=sumo-chatwoot-bastion-stack-prod
          aws cloudformation deploy \
            --template-file aws_cloudformation/production/bastion.yml \
            --parameters ParameterKey=Environment,ParameterValue=prod \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              KeyPairName=${{ secrets.KEY_NAME }} \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

          SumoChatwootBastionHostAPublicIP=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootBastionHostAPublicIP'].OutputValue" --output text)
          echo "BastionHostAPublicIP=${SumoChatwootBastionHostAPublicIP}" >> $GITHUB_ENV

          SumoChatwootBastionHostBPublicIP=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootBastionHostBPublicIP'].OutputValue" --output text)
          echo "BastionHostBPublicIP=${SumoChatwootBastionHostBPublicIP}" >> $GITHUB_ENV

      - name: Chatwoot EC2-Cloudformation
        run: |
          STACK_NAME=sumo-chatwoot-instance-stack-prod
          aws cloudformation deploy \
            --template-file aws_cloudformation/production/chatwoot.yml \
            --parameters ParameterKey=Environment,ParameterValue=prod \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              KeyPairName=${{ secrets.KEY_NAME }} \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

          SumoChatwootInstanceIP=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootInstanceIP'].OutputValue" --output text)
          echo "EC2_IP=${SumoChatwootInstanceIP}" >> $GITHUB_ENV

          SumoChatwootInstanceId=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootInstanceId'].OutputValue" --output text)
          echo "EC2_ID=${SumoChatwootInstanceId}" >> $GITHUB_ENV

      - name: Route53-Cloudformation
        run: |
          STACK_NAME=sumo-chatwoot-route-stack-prod
          aws cloudformation deploy \
            --template-file aws_cloudformation/production/route.yml \
            --parameters ParameterKey=Environment,ParameterValue=prod \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              HostedZoneId=${{ secrets.ROUTE_HZ_ID }} \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

          echo "Wait for creating domain"
          sleep 60

      - name: Upload Source Code to Bastion-A
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.BastionHostAPublicIP }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          overwrite: true
          timeout: 150s
          source: './*'
          target: '/home/ubuntu/chatwoot'

      - name: Upload ssh key to Bastion-A
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.BastionHostAPublicIP }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /home/ubuntu
            echo "${{ secrets.SSH_KEY }}" > ${{ secrets.KEY_NAME }}.pem
            chmod 600 ${{ secrets.KEY_NAME }}.pem

            ssh -i ${{ secrets.KEY_NAME }}.pem -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_IP }} << 'EOF'
            sudo rm -rf /home/ubuntu/chatwoot
            EOF

            scp -i ${{ secrets.KEY_NAME }}.pem -r /home/ubuntu/chatwoot ubuntu@${{ env.EC2_IP }}:/home/ubuntu

      - name: Create chatwoot user
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.BastionHostAPublicIP }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          script: |
            ssh -i ${{ secrets.KEY_NAME }}.pem -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_IP }} << 'EOT'

            if ! id -u "chatwoot"; then
              sudo adduser --disabled-password --gecos "" chatwoot
            fi

            sudo -i -u chatwoot << "EOF"
            if [ ! -d "chatwoot" ]; then
              mkdir chatwoot
            else
              echo "Directory chatwoot already exists."
            fi
            EOF

            sudo rm -rf /home/chatwoot/*
            sudo cp -rf /home/ubuntu/chatwoot /home/chatwoot
            sudo chown -R chatwoot:chatwoot /home/chatwoot/chatwoot

            EOT
      - name: Install Chatwoot in Chatwoot EC2
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.BastionHostAPublicIP }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          script: |
            ssh -i ${{ secrets.KEY_NAME }}.pem -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_IP }} << 'EOT'

            echo "run install.sh"
            sudo chmod 777 /home/chatwoot/chatwoot/install.sh
            sudo /home/chatwoot/chatwoot/install.sh --install

            sudo -i -u chatwoot << "EOF"
            cd chatwoot

            sed -i -e "/FRONTEND_URL/ s/=.*/=https:\/\/dev-chat.sumoscheduler.com/" .env
            sed -i -e '/REDIS_URL/ s/=.*/=redis:\/\/'"${{ env.REDIS_HOST }}"':6379/' .env
            sed -i -e '/POSTGRES_HOST/ s/=.*/='"${{ env.POSTGRES_HOST }}"'/' .env
            sed -i -e '/POSTGRES_USERNAME/ s/=.*/='"${{ secrets.RDS_MASTER_USERNAME }}"'/' .env
            sed -i -e "/POSTGRES_PASSWORD/ s/=.*/='"${{ secrets.RDS_MASTER_PASSWORD }}"'/" .env
            sed -i -e "/SMTP_ADDRESS/ s/=.*/='"${{ secrets.SMTP_ADDRESS }}"'/" .env
            sed -i -e "/SMTP_PASSWORD/ s/=.*/='"${{ secrets.SMTP_PASSWORD }}"'/" .env
            sed -i -e "/SMTP_PORT/ s/=.*/='"${{ secrets.SMTP_PORT }}"'/" .env
            sed -i -e "/SMTP_USERNAME/ s/=.*/='"${{ secrets.SMTP_USERNAME }}"'/" .env
            sed -i -e "/ACTIVE_STORAGE_SERVICE/ s/=.*/=amazon/" .env
            sed -i -e "/AWS_ACCESS_KEY_ID/ s/=.*/='"${{ secrets.AWS_ACCESS_KEY_ID }}"'/" .env
            sed -i -e "/AWS_SECRET_ACCESS_KEY/ s/=.*/='"${{ secrets.AWS_SECRET_ACCESS_KEY }}"'/" .env
            sed -i -e "/AWS_REGION/ s/=.*/='"${{ secrets.AWS_REGION }}"'/" .env
            sed -i -e "/S3_BUCKET_NAME/ s/=.*/=sumo-chatwoot-dev/" .env
            sed -i -e "/RAILS_ENV/ s/=.*/=production/" .env

            RAILS_ENV=production bundle exec rake db:prepare
            sudo cwctl --restart
            EOF

            EOT
      - name: Add instance to the target group attached to the alb
        run: |
          TARGET_GROUP_ARN=${{ env.TARGET_GROUP_ARN }}
          INSTANCE_ID=${{ env.EC2_ID }}
          aws elbv2 register-targets --target-group-arn $TARGET_GROUP_ARN --targets Id=$INSTANCE_ID

      - name: Create the AMI
        run: |
          echo "Create the AMI"
          STACK_NAME=sumo-chatwoot-instance-stack-prod

          # Retrieve existing AMIs with a similar name
          BASE_AMI_NAME="chatwoot-base-ami-prod"
          existing_ami_id=$(aws ec2 describe-images --owners self --filters "Name=name,Values=$BASE_AMI_NAME" --query 'Images[0].ImageId' --output text)

          if [ "$existing_ami_id" != "None" ]; then
            echo "Found existing AMI with ID: $existing_ami_id. Deregistering..."
            aws ec2 deregister-image --image-id $existing_ami_id

            # Also, delete associated snapshots
            snapshot_ids=$(aws ec2 describe-images --image-ids $existing_ami_id --query 'Images[0].BlockDeviceMappings[*].Ebs.SnapshotId' --output text)
            echo "snapshot_ids=$snapshot_ids"
            if [ "$snapshot_ids" != "None" ]; then
              for snapshot_id in $snapshot_ids; do
                echo "Deleting snapshot $snapshot_id"
                aws ec2 delete-snapshot --snapshot-id $snapshot_id
              done
            fi
          else
            echo "No existing AMI found with the name $BASE_AMI_NAME."
          fi

          INSTANCE_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs[?OutputKey==`SumoChatwootInstanceId`].OutputValue' --output text)

          AMI_ID=$(aws ec2 create-image --instance-id $INSTANCE_ID --name $BASE_AMI_NAME --description "Base AMI for Chatwoot application" --no-reboot --query 'ImageId' --output text)
          echo "AMI created with ID: $AMI_ID"
          echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV

      - name: Auto Scaling-Cloudformation
        run: |
          STACK_NAME=sumo-chatwoot-auto-scaling-stack-prod
          aws cloudformation deploy \
            --template-file aws_cloudformation/production/auto_scaling.yml \
            --parameters ParameterKey=Environment,ParameterValue=prod \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              ChatwootAMI=${{ env.AMI_ID }} \
              KeyPairName=${{ secrets.KEY_NAME }} \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

      - name: Post-deployment script
        run: |
          STACK_NAME=sumo-chatwoot-route-stack-prod
          DomainName=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='RecordSetName'].OutputValue" --output text)
          echo "Deployment complete!\n Check the url: https://${DomainName}"
