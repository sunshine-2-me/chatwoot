name: Deploy Sumo Chatwoot Infrastructure

on:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Validate Cloudformation
        run: |
          aws cloudformation validate-template \
            --template-body file://aws_cloudformation/network.yml
          aws cloudformation validate-template \
            --template-body file://aws_cloudformation/application_load_balancer.yml
          aws cloudformation validate-template \
            --template-body file://aws_cloudformation/postgresql.yml
          aws cloudformation validate-template \
            --template-body file://aws_cloudformation/redis.yml
          aws cloudformation validate-template \
            --template-body file://aws_cloudformation/bastion.yml
          aws cloudformation validate-template \
            --template-body file://aws_cloudformation/chatwoot.yml
      
      - name: Deploy Network Cloudformation
        run: |
          STACK_NAME=sumo-chatwoot-network-stack
          aws cloudformation deploy \
            --template-file aws_cloudformation/network.yml \
            --stack-name $STACK_NAME \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

          # SumoChatwootVPCId=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootVPCId'].OutputValue" --output text)
          # echo "SumoChatwootVPCId=${SumoChatwootVPCId}" >> $GITHUB_ENV

          # SumoChatwootPublicSubnet1Id=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootPublicSubnet1Id'].OutputValue" --output text)
          # echo "SumoChatwootPublicSubnet1Id=${SumoChatwootPublicSubnet1Id}" >> $GITHUB_ENV

          # SumoChatwootPublicSubnet2Id=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootPublicSubnet2Id'].OutputValue" --output text)
          # echo "SumoChatwootPublicSubnet2Id=${SumoChatwootPublicSubnet2Id}" >> $GITHUB_ENV

          # SumoChatwootPrivateSubnet1Id=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootPrivateSubnet1Id'].OutputValue" --output text)
          # echo "SumoChatwootPrivateSubnet1Id=${SumoChatwootPrivateSubnet1Id}" >> $GITHUB_ENV

          # SumoChatwootPrivateSubnet2Id=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootPrivateSubnet2Id'].OutputValue" --output text)
          # echo "SumoChatwootPrivateSubnet2Id=${SumoChatwootPrivateSubnet2Id}" >> $GITHUB_ENV

      - name: Deploy Application Load Balancer Cloudformation
        run: |
          STACK_NAME=sumo-chatwoot-alb-stack
          aws cloudformation deploy \
            --template-file aws_cloudformation/application_load_balancer.yml \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              # SumoChatwootVPCId=${{ env.SumoChatwootVPCId }} \
              # SumoChatwootPublicSubnet1Id=${{ env.SumoChatwootPublicSubnet1Id }} \
              # SumoChatwootPublicSubnet2Id=${{ env.SumoChatwootPublicSubnet2Id}} \
              SumoChatwootCertificateArn=${{ secrets.ACM_CERTIFICATE_ARN }} \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

          # SumoChatwootLoadBalancerDNSName=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootLoadBalancerDNSName'].OutputValue" --output text)
          # echo "SumoChatwootLoadBalancerDNSName=${SumoChatwootLoadBalancerDNSName}" >> $GITHUB_ENV

          # SumoChatwootLoadBalancerSGId=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootLoadBalancerSGId'].OutputValue" --output text)
          # echo "SumoChatwootLoadBalancerSGId=${SumoChatwootLoadBalancerSGId}" >> $GITHUB_ENV
          
      - name: Deploy Postgresql
        run: |
          STACK_NAME=sumo-chatwoot-postgre-stack
          aws cloudformation deploy \
            --template-file aws_cloudformation/postgresql.yml \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              # SumoChatwootVPCId=${{ env.SumoChatwootVPCId }} \
              # SumoChatwootPrivateSubnet1Id=${{ env.SumoChatwootPrivateSubnet1Id }} \
              # SumoChatwootPrivateSubnet2Id=${{ env.SumoChatwootPrivateSubnet2Id }} \
              # SumoChatwootLoadBalancerSGId=${{ env.SumoChatwootLoadBalancerSGId }} \
              SumoChatwootDBUsername=${{ secrets.RDS_MASTER_USERNAME }} \
              SumoChatwootDBPassword=${{ secrets.RDS_MASTER_PASSWORD }} \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

          # SumoChatwootRDSInstanceEndpoint=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootRDSInstanceEndpoint'].OutputValue" --output text)
          # echo "SumoChatwootRDSInstanceEndpoint=${SumoChatwootRDSInstanceEndpoint}" >> $GITHUB_ENV

          # SumoChatwootRDSInstancePort=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootRDSInstancePort'].OutputValue" --output text)
          # echo "SumoChatwootRDSInstancePort=${SumoChatwootRDSInstancePort}" >> $GITHUB_ENV

      - name: Deploy Redis
        run: |
          STACK_NAME=sumo-chatwoot-redis-stack
          aws cloudformation deploy \
            --template-file aws_cloudformation/redis.yml \
            --stack-name $STACK_NAME \
            # --parameter-overrides \
            #   SumoChatwootVPCId=${{ env.SumoChatwootVPCId }} \
            #   SumoChatwootPrivateSubnet1Id=${{ env.SumoChatwootPrivateSubnet1Id }} \
            #   SumoChatwootPrivateSubnet2Id=${{ env.SumoChatwootPrivateSubnet2Id }} \
            #   SumoChatwootLoadBalancerSGId=${{ env.SumoChatwootLoadBalancerSGId }} \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

          # SumoChatwootRedisPrimaryEndpointAddress=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootRedisPrimaryEndpointAddress'].OutputValue" --output text)
          # echo "SumoChatwootRedisPrimaryEndpointAddress=${SumoChatwootRedisPrimaryEndpointAddress}" >> $GITHUB_ENV

          # SumoChatwootRedisPrimaryEndpointPort=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootRedisPrimaryEndpointPort'].OutputValue" --output text)
          # echo "SumoChatwootRedisPrimaryEndpointPort=${SumoChatwootRedisPrimaryEndpointPort}" >> $GITHUB_ENV

      - name: Deploy Bastion
        run: |
          STACK_NAME=sumo-chatwoot-bastion-stack
          aws cloudformation deploy \
            --template-file aws_cloudformation/bastion.yml \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              # SumoChatwootVPCId=${{ env.SumoChatwootVPCId }} \
              # SumoChatwootPublicSubnet1Id=${{ env.SumoChatwootPublicSubnet1Id }} \
              # SumoChatwootPublicSubnet2Id=${{ env.SumoChatwootPublicSubnet2Id }} \
              KeyPairName=${{ secrets.KEY_NAME }} \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

          # SumoChatwootBastionHostAPublicIP=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootBastionHostAPublicIP'].OutputValue" --output text)
          # echo "SumoChatwootBastionHostAPublicIP=${SumoChatwootBastionHostAPublicIP}" >> $GITHUB_ENV

          # SumoChatwootBastionHostBPublicIP=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootBastionHostBPublicIP'].OutputValue" --output text)
          # echo "SumoChatwootBastionHostBPublicIP=${SumoChatwootBastionHostBPublicIP}" >> $GITHUB_ENV

      - name: Deploy Chatwoot EC2
        run: |
          STACK_NAME=sumo-chatwoot-instance-stack
          aws cloudformation deploy \
            --template-file aws_cloudformation/chatwoot.yml \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              # SumoChatwootPublicSubnet1Id=${{ env.SumoChatwootPublicSubnet1Id }} \
              # SumoChatwootPrivateSubnet1Id=${{ env.SumoChatwootPrivateSubnet1Id }} \
              # SumoChatwootLoadBalancerSGId=${{ env.SumoChatwootLoadBalancerSGId }} \
              KeyPairName=${{ secrets.KEY_NAME }} \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

          # SumoChatwootInstanceId=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootInstanceId'].OutputValue" --output text)
          # echo "SumoChatwootInstanceId=${SumoChatwootInstanceId}" >> $GITHUB_ENV

          SumoChatwootInstancePublicIP=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootInstancePublicIP'].OutputValue" --output text)
          echo "SumoChatwootInstancePublicIP=${SumoChatwootInstancePublicIP}" >> $GITHUB_ENV

          # SumoChatwootInstancePrivateIP=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootInstancePrivateIP'].OutputValue" --output text)
          # echo "SumoChatwootInstancePrivateIP=${SumoChatwootInstancePrivateIP}" >> $GITHUB_ENV

      - name: Upload install.sh to Chatwoot EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SumoChatwootInstancePublicIP }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          overwrite: true
          rm: true
          source: './install.sh'
          target: '~/'

      - name: Create chatwoot user to Chatwoot EC2
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.SumoChatwootInstancePublicIP }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          script: |
            if ! id -u "chatwoot"; then
              adduser --disabled-password --gecos "" chatwoot
            fi
      
      - name: Upload Source Code to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SumoChatwootInstancePublicIP }}
          username: chatwoot
          key: ${{ secrets.SSH_KEY }}
          overwrite: true
          rm: true
          source: './*'
          target: '~/chatwoot'

      - name: Install Chatwoot in Chatwoot EC2
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.SumoChatwootInstancePublicIP }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          script: |
            chmod 777 install.sh
            sudo ./install.sh --install
            
            # sed -i -e '/REDIS_URL/ s/=.*/=redis:\/\/$REDIS_HOST:6379/' .env
            # sed -i -e '/POSTGRES_HOST/ s/=.*/=$POSTGRES_HOST/' .env
            # sed -i -e '/POSTGRES_USERNAME/ s/=.*/=$POSTGRES_USERNAME/' .env
            # sed -i -e "/POSTGRES_PASSWORD/ s/=.*/=$POSTGRES_PASSWORD/" .env

            # RAILS_ENV=production bundle exec rake db:prepare
            # sudo cwctl --restart
            
      - name: Print CloudFormation Outputs
        run: |
          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name sumo-chatwoot-stack --query 'Stacks[0].Outputs' --output table

      # - name: Create the AMI
      #   run: |
      #     echo "Create the AMI"
      #     INSTANCE_ID=$(aws cloudformation describe-stacks --stack-name YourStackName --query 'Stacks[0].Outputs[?OutputKey==`ChatwootInstanceId`].OutputValue' --output text)
      #     aws ec2 create-image --instance-id $INSTANCE_ID --name "chatwoot-base-ami" --description "Base AMI for Chatwoot application" --no-reboot

      - name: Post-deployment script
        run: |
          echo "Deployment complete!"
