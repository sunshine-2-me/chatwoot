name: Deploy Sumo Chatwoot Infrastructure for Development

on:
  push:
  # pull_request:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Validate Cloudformation
        run: |
          aws cloudformation validate-template \
            --template-body file://aws_cloudformation/network.yml
          aws cloudformation validate-template \
            --template-body file://aws_cloudformation/application_load_balancer.yml
          aws cloudformation validate-template \
            --template-body file://aws_cloudformation/postgresql.yml
          aws cloudformation validate-template \
            --template-body file://aws_cloudformation/redis.yml
          aws cloudformation validate-template \
            --template-body file://aws_cloudformation/bastion.yml
          aws cloudformation validate-template \
            --template-body file://aws_cloudformation/chatwoot.yml
      
      - name: Network-Cloudformation
        run: |
          STACK_NAME=sumo-chatwoot-network-stack
          aws cloudformation deploy \
            --template-file aws_cloudformation/network.yml \
            --stack-name $STACK_NAME \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

      - name: Application Load Balancer-Cloudformation
        run: |
          STACK_NAME=sumo-chatwoot-alb-stack
          aws cloudformation deploy \
            --template-file aws_cloudformation/application_load_balancer.yml \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              SumoChatwootCertificateArn=${{ secrets.ACM_CERTIFICATE_ARN }} \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

      - name: Postgresql-Cloudformation
        run: |
          STACK_NAME=sumo-chatwoot-postgre-stack
          aws cloudformation deploy \
            --template-file aws_cloudformation/postgresql.yml \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              SumoChatwootDBUsername=${{ secrets.RDS_MASTER_USERNAME }} \
              SumoChatwootDBPassword=${{ secrets.RDS_MASTER_PASSWORD }} \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

          # SumoChatwootProdRDSInstanceEndpoint=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootProdRDSInstanceEndpoint'].OutputValue" --output text)
          # echo "POSTGRES_HOST=${SumoChatwootProdRDSInstanceEndpoint}" >> $GITHUB_ENV

          SumoChatwootDevRDSInstanceEndpoint=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootDevRDSInstanceEndpoint'].OutputValue" --output text)
          echo "POSTGRES_HOST=${SumoChatwootDevRDSInstanceEndpoint}" >> $GITHUB_ENV

      - name: Redis-Cloudformation
        run: |
          STACK_NAME=sumo-chatwoot-redis-stack
          aws cloudformation deploy \
            --template-file aws_cloudformation/redis.yml \
            --stack-name $STACK_NAME \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

          # SumoChatwootProdRedisEndpointAddress=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootProdRedisEndpointAddress'].OutputValue" --output text)
          # echo "REDIS_HOST=${SumoChatwootProdRedisEndpointAddress}" >> $GITHUB_ENV

          SumoChatwootDevRedisEndpointAddress=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootDevRedisEndpointAddress'].OutputValue" --output text)
          echo "REDIS_HOST=${SumoChatwootDevRedisEndpointAddress}" >> $GITHUB_ENV

      - name: Bastion-Cloudformation
        run: |
          STACK_NAME=sumo-chatwoot-bastion-stack
          aws cloudformation deploy \
            --template-file aws_cloudformation/bastion.yml \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              KeyPairName=${{ secrets.KEY_NAME }} \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

          # SumoChatwootBastionHostAPublicIP=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootBastionHostAPublicIP'].OutputValue" --output text)
          # echo "SumoChatwootBastionHostAPublicIP=${SumoChatwootBastionHostAPublicIP}" >> $GITHUB_ENV

          # SumoChatwootBastionHostBPublicIP=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootBastionHostBPublicIP'].OutputValue" --output text)
          # echo "SumoChatwootBastionHostBPublicIP=${SumoChatwootBastionHostBPublicIP}" >> $GITHUB_ENV

      - name: Chatwoot EC2-Cloudformation
        run: |
          STACK_NAME=sumo-chatwoot-instance-stack
          aws cloudformation deploy \
            --template-file aws_cloudformation/chatwoot.yml \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              KeyPairName=${{ secrets.KEY_NAME }} \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

          # SumoChatwootProdInstancePublicIP=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootProdInstancePublicIP'].OutputValue" --output text)
          # echo "EC2_IP=${SumoChatwootProdInstancePublicIP}" >> $GITHUB_ENV

          SumoChatwootDevInstancePublicIP=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootDevInstancePublicIP'].OutputValue" --output text)
          echo "EC2_IP=${SumoChatwootDevInstancePublicIP}" >> $GITHUB_ENV

          # SumoChatwootProdInstanceId=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootProdInstanceId'].OutputValue" --output text)
          # echo "EC2_ID=${SumoChatwootProdInstanceId}" >> $GITHUB_ENV
          echo "Start instance: $SumoChatwootProdInstanceId"
          aws ec2 start-instances --instance-ids $SumoChatwootProdInstanceId

          SumoChatwootDevInstanceId=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoChatwootDevInstanceId'].OutputValue" --output text)
          echo "EC2_ID=${SumoChatwootDevInstanceId}" >> $GITHUB_ENV
          echo "Start instance: $SumoChatwootDevInstanceId"
          aws ec2 start-instances --instance-ids $SumoChatwootDevInstanceId
          
      - name: Route53-Cloudformation
        run: |
          STACK_NAME=sumo-chatwoot-route-stack
          aws cloudformation deploy \
            --template-file aws_cloudformation/route.yml \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              HostedZoneId=${{ secrets.ROUTE_HZ_ID }} \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

      - name: Upload Source Code to public instance
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.EC2_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          overwrite: true
          timeout: 150s
          source: './*'
          target: '/home/ubuntu/chatwoot'

      - name: Install Chatwoot in public instance
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.EC2_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          script: |
            if ! id -u "chatwoot"; then
              sudo adduser --disabled-password --gecos "" chatwoot
            fi

            sudo -i -u chatwoot << "EOF"
            if [ ! -d "chatwoot" ]; then
              mkdir chatwoot
            else
              echo "Directory chatwoot already exists."
            fi
            EOF

            sudo cp -ri /home/ubuntu/chatwoot /home/chatwoot
            sudo chown -R chatwoot:chatwoot /home/chatwoot/chatwoot

            POSTGRES_HOST=${{ env.POSTGRES_HOST }}
            POSTGRES_USERNAME=${{ secrets.RDS_MASTER_USERNAME }}
            POSTGRES_PASSWORD=${{ secrets.RDS_MASTER_PASSWORD }}
            REDIS_HOST=${{ env.REDIS_HOST }}

            cd /home/ubuntu/chatwoot
            echo "Wait for creating chat.sumoscheduler.com record"
            sleep 60

            echo "run install.sh"
            sed -i "s/domain_name='chat.sumoscheduler.com'/domain_name='dev.chat.sumoscheduler.com'/" install.sh
            chmod 777 install.sh
            sudo ./install.sh --install
            
            sudo -i -u chatwoot << "EOF"
            cd chatwoot

            sed -i -e '/REDIS_URL/ s/=.*/=redis:\/\/$REDIS_HOST:6379/' .env
            sed -i -e '/POSTGRES_HOST/ s/=.*/=$POSTGRES_HOST/' .env
            sed -i -e '/POSTGRES_USERNAME/ s/=.*/=$POSTGRES_USERNAME/' .env
            sed -i -e "/POSTGRES_PASSWORD/ s/=.*/=$POSTGRES_PASSWORD/" .env

            RAILS_ENV=production bundle exec rake db:prepare
            sudo cwctl --restart
            EOF

      - name: Create the AMI
        run: |
          echo "Create the AMI"
          STACK_NAME=sumo-chatwoot-instance-stack
          
          # Retrieve existing AMIs with a similar name
          BASE_AMI_NAME="chatwoot-base-ami"
          existing_ami_id=$(aws ec2 describe-images --owners self --filters "Name=name,Values=$BASE_AMI_NAME" --query 'Images[0].ImageId' --output text)

          if [ "$existing_ami_id" != "None" ]; then
            echo "Found existing AMI with ID: $existing_ami_id. Deregistering..."
            aws ec2 deregister-image --image-id $existing_ami_id

            # Also, delete associated snapshots
            snapshot_ids=$(aws ec2 describe-images --image-ids $existing_ami_id --query 'Images[0].BlockDeviceMappings[*].Ebs.SnapshotId' --output text)
            echo "snapshot_ids=$snapshot_ids"
            if [ "$snapshot_ids" != "None" ]; then
              for snapshot_id in $snapshot_ids; do
                echo "Deleting snapshot $snapshot_id"
                aws ec2 delete-snapshot --snapshot-id $snapshot_id
              done
            fi
          else
            echo "No existing AMI found with the name $BASE_AMI_NAME."
          fi          

          # INSTANCE_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs[?OutputKey==`SumoChatwootProdInstanceId`].OutputValue' --output text)
          INSTANCE_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs[?OutputKey==`SumoChatwootDevInstanceId`].OutputValue' --output text)
          AMI_ID=$(aws ec2 create-image --instance-id $INSTANCE_ID --name "chatwoot-base-ami" --description "Base AMI for Chatwoot application" --no-reboot --query 'ImageId' --output text)
          echo "AMI created with ID: $AMI_ID"
          echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV

      - name: Auto Scaling-Cloudformation
        run: |
          STACK_NAME=sumo-chatwoot-auto-scaling-stack
          aws cloudformation deploy \
            --template-file aws_cloudformation/auto_scaling.yml \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              ChatwootAMI=${{ env.AMI_ID }} \
              KeyPairName=${{ secrets.KEY_NAME }} \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table
          
          echo "Stop instance: ${{ env.EC2_ID }}"
          aws ec2 stop-instances --instance-ids ${{ env.EC2_ID }}

      # - name: Post-deployment script
      #   run: |
      #     echo "Deployment complete!"
